(()=>{"use strict";var e={72:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],A=o.base?c[0]+o.base:c[0],l=a[A]||0,d="".concat(A," ").concat(l);a[A]=l+1;var u=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=r(p,o);o.byIndex=s,n.splice(s,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var c=o(e,r),A=0;A<a.length;A++){var l=t(a[A]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=c}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t}).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<e.length;A++){var l=[].concat(e[A]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},378:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,"body,*{font-family:monospace}a{cursor:pointer}.wrapper{display:flex;flex-direction:column;height:100dvh;overflow:hidden}#header,#footer{display:flex;justify-content:space-between;align-items:center;background-color:#1f2733;color:#e6edf3;font-weight:bolder;font-size:1rem}#footer{padding:.2em .5em}.title{display:flex;align-items:center;gap:.5em}.menu{margin:0 .5rem}#workspace{display:flex;flex:1;background-color:#0d1117;color:#e6edf3}#workspace h2{font-size:1rem;font-weight:bold}#workspace .job{flex:1;margin:.5em}#workspace .activities{flex:2;margin:.5em}.hidden{display:none}.activity-list,.job-list{margin:.5rem 0 .5rem 0;display:flex;flex-direction:column;gap:1em}.activity{display:flex;flex-direction:column;gap:.3em;padding:.5em;border:2px solid #2c333a}.activity>*{display:flex}.activity>.lower{justify-content:end;gap:1rem}.activity.unset{border:2px dashed #2c333a}.editor{display:flex;flex-direction:column;align-items:flex-start;gap:2em}.project{width:4em}.task{flex-grow:1}.status-complete-start{color:#2eea7f}.status-complete-end{color:#f45b69}.status-incomplete{cursor:pointer;color:#f4ce42}.end-task{margin-left:-9px}","",{version:3,sources:["webpack://./src/styles/global.scss"],names:[],mappings:"AA6BA,OACE,qBAAA,CAGF,EACE,cAAA,CAKF,SACE,YAAA,CACA,qBAAA,CACA,aAAA,CACA,eAAA,CAGF,gBACE,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,wBAxCc,CAyCd,aArCmB,CAsCnB,kBAAA,CACA,cAAA,CAGF,QACE,iBAAA,CAGF,OACE,YAAA,CACA,kBAAA,CACA,QAAA,CAGF,MACE,cAAA,CAGF,WACE,YAAA,CACA,MAAA,CACA,wBAnEc,CAoEd,aA5DmB,CA+DrB,cACE,cAAA,CACA,gBAAA,CAGF,gBACE,MAAA,CACA,WAAA,CAGF,uBACE,MAAA,CACA,WAAA,CAKF,QACE,YAAA,CAKF,yBACE,sBAAA,CACA,YAAA,CACA,qBAAA,CACA,OAAA,CAGF,UACE,YAAA,CACA,qBAAA,CACA,QAAA,CACA,YAAA,CACA,wBAAA,CAGF,YACE,YAAA,CAGF,iBACE,mBAAA,CACA,QAAA,CAGF,gBACE,yBAAA,CAGF,QACE,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,OAAA,CAGF,SACE,SAAA,CAGF,MACE,WAAA,CAGF,uBACE,aAzHY,CA4Hd,qBACE,aA3HU,CA8HZ,mBACE,cAAA,CACA,aAjIa,CAoIf,UACE,gBAAA",sourcesContent:["/* Primary brand colors (based on cyan) */\n$color-primary: #00F6FF;         // Bright accent (main brand color)\n$color-primary-light: #66FCFF;   // Lighter hover/active\n$color-primary-dark: #00C2C9;    // Darker variant for contrast\n\n/* Backgrounds */\n$color-bg-main: #0D1117;         // Main dark background\n$color-bg-secondary: #161B22;    // Cards, modals, secondary layers\n\n/* Surface layers */\n$color-surface: #1F2733;         // Surfaces like toolbars, panels\n$color-elevation: #2A3442;       // Popovers, dropdowns\n\n/* Text */\n$color-text-primary: #E6EDF3;    // Main text\n$color-text-secondary: #9BA7B4;  // Muted text\n$color-text-on-primary: #000000; // Text on cyan backgrounds\n\n/* Borders and dividers */\n$color-border: #2C333A;          // Input borders and dividers\n$color-border-light: #3B424B;    // Subtle lines and outlines\n\n/* State indicators */\n$color-green: #2EEA7F;         // Success/complete\n$color-yellow: #F4CE42;         // Warning/caution\n$color-red: #F45B69;           // Error/danger\n\n/* General */\n\nbody, * { \n  font-family: monospace;\n}\n\na {\n  cursor: pointer;\n}\n\n/* Page formatting */\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  height: 100dvh;\n  overflow: hidden;\n}\n\n#header, #footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: $color-surface;\n  color: $color-text-primary;\n  font-weight: bolder;\n  font-size: 1rem;\n}\n\n#footer {\n  padding: 0.2em 0.5em;\n}\n\n.title {\n  display: flex;\n  align-items: center;\n  gap: 0.5em;\n}\n\n.menu {\n  margin: 0 0.5rem;\n}\n\n#workspace {\n  display: flex;\n  flex: 1;\n  background-color: $color-bg-main;\n  color: $color-text-primary;\n}\n\n#workspace h2 {\n  font-size: 1rem;\n  font-weight: bold;\n}\n\n#workspace .job {\n  flex: 1;\n  margin: 0.5em\n}\n\n#workspace .activities {\n  flex: 2;\n  margin: 0.5em;\n}\n\n/* Common */\n\n.hidden {\n  display: none;\n}\n\n/* Activity area */\n\n.activity-list, .job-list {\n  margin: 0.5rem 0 0.5rem 0;\n  display: flex;\n  flex-direction: column;\n  gap: 1em;\n}\n\n.activity {\n  display: flex;\n  flex-direction: column;\n  gap: 0.3em;\n  padding: 0.5em;\n  border: 2px solid $color-border;\n}\n\n.activity > * {\n  display: flex;\n}\n\n.activity > .lower {\n  justify-content: end;\n  gap: 1rem;\n}\n\n.activity.unset{\n  border: 2px dashed $color-border;\n}\n\n.editor {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 2em;\n}\n\n.project {\n  width: 4em;\n}\n\n.task {\n  flex-grow: 1;\n}\n\n.status-complete-start {\n  color: $color-green;\n}\n\n.status-complete-end {\n  color: $color-red;\n}\n\n.status-incomplete {\n  cursor: pointer;\n  color: $color-yellow;\n}\n\n.end-task {\n  margin-left: -9px;\n}\n"],sourceRoot:""}]);const s=i},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},649:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,'html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:"";content:none}table{border-collapse:collapse;border-spacing:0}button{background:none;color:inherit;border:none;padding:0;font:inherit;cursor:pointer;outline:inherit}input{all:unset}a{all:unset}',"",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAOA,2ZAaC,QAAA,CACA,SAAA,CACA,QAAA,CACA,cAAA,CACA,YAAA,CACA,uBAAA,CAGD,8EAEC,aAAA,CAED,KACC,aAAA,CAED,MACC,eAAA,CAED,aACC,WAAA,CAED,oDAEC,UAAA,CACA,YAAA,CAED,MACC,wBAAA,CACA,gBAAA,CAGD,OACG,eAAA,CACA,aAAA,CACA,WAAA,CACA,SAAA,CACA,YAAA,CACA,cAAA,CACA,eAAA,CAGH,MACE,SAAA,CAGF,EACE,SAAA",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n\n   Some resets have been added by me at the bottom\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\nbutton {\n   background: none;\n   color: inherit;\n   border: none;\n   padding: 0;\n   font: inherit;\n   cursor: pointer;\n   outline: inherit;\n}\n\ninput {\n  all: unset;\n}\n\na {\n  all: unset;\n}\n"],sourceRoot:""}]);const s=i},659:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},675:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var o=t(72),r=t.n(o),a=t(825),i=t.n(a),s=t(659),c=t.n(s),A=t(675),l=t.n(A),d=t(540),u=t.n(d),p=t(113),m=t.n(p),f=t(649),C={};C.styleTagTransform=m(),C.setAttributes=l(),C.insert=c().bind(null,"head"),C.domAPI=i(),C.insertStyleElement=u(),r()(f.A,C),f.A&&f.A.locals&&f.A.locals;var g=t(378),b={};b.styleTagTransform=m(),b.setAttributes=l(),b.insert=c().bind(null,"head"),b.domAPI=i(),b.insertStyleElement=u(),r()(g.A,b),g.A&&g.A.locals&&g.A.locals;const y=()=>{const e=(n=new Date,{hrs:String(n.getHours()).padStart(2,"0"),mins:String(n.getMinutes()).padStart(2,"0")});var n;return`${e.hrs}:${e.mins}`},v=(e,n)=>(n[0]-e[0]+(n[1]-e[1])/60).toFixed(2);document.querySelector("#store-activities").addEventListener("click",()=>{console.log([...document.querySelectorAll(".activity")].map(e=>[...e.querySelectorAll(".value")].reduce((e,n)=>({...e,[n.classList[0]]:n.textContent||n.value}),{})))}),document.querySelector("#new-activity").addEventListener("click",()=>{(()=>{const e=document.querySelector(".activity-list"),n=(()=>{const e=document.createElement("div");e.classList.add("activity","unset");const n=document.createElement("div");n.className="upper";const t=document.createElement("div");t.className="lower";const o=Object.assign(document.createElement("input"),{className:"project value",placeholder:"0000",maxLength:4}),r=Object.assign(document.createElement("input"),{className:"task value",placeholder:"task..."}),a=Object.assign(document.createElement("p"),{className:"start-time status-complete-start value",textContent:y()}),i=Object.assign(document.createElement("p"),{className:"end-time status-complete-end unset value"}),s=Object.assign(document.createElement("p"),{className:"elapsed-time status-complete value"}),c=Object.assign(document.createElement("button"),{className:"end-task status-incomplete unset",textContent:"end task"});return c.addEventListener("click",()=>{i.classList.remove("unset"),e.classList.remove("unset"),c.classList.add("hidden"),i.textContent=y();const n=a.textContent.split(":"),t=i.textContent.split(":"),o=v(n,t);s.textContent=`${o}`},{once:!0}),n.append(o,r),t.append(a,i,s,c),e.append(n,t),e})();e.insertBefore(n,e.firstChild)})(),document.querySelector(".activity-list :first-child .project").focus()})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,