(()=>{"use strict";var e={56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},s=[],i=0;i<e.length;i++){var c=e[i],d=r.base?c[0]+r.base:c[0],l=o[d]||0,A="".concat(d," ").concat(l);o[d]=l+1;var u=t(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var b=a(p,r);r.byIndex=i,n.splice(i,0,{identifier:A,updater:b,references:1})}s.push(A)}return s}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var i=t(o[s]);n[i].references--}for(var c=r(e,a),d=0;d<o.length;d++){var l=t(o[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=c}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t}).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&s[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},911:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(354),a=t.n(r),o=t(314),s=t.n(o)()(a());s.push([e.id,'.wrapper{display:flex;flex-direction:column;justify-content:space-between;height:100dvh;background-color:#0d1117}.workspace{display:grid;grid-template-columns:1fr 2fr;padding:.6rem;flex-grow:1;gap:.4rem;color:#e6edf3}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:"";content:none}table{border-collapse:collapse;border-spacing:0}button{background:none;color:inherit;border:none;padding:0;font:inherit;cursor:pointer;outline:inherit}input{all:unset}a{all:unset}footer>ul{display:flex;flex-direction:row;justify-content:space-between;padding:.6rem;font-size:1rem;color:#e6edf3}nav{display:flex;flex-direction:row;justify-content:space-between;padding:.6rem;background-color:#161b22;font-size:1.2rem;font-weight:bold;color:#e6edf3}.menu{display:flex;flex-direction:row;justify-content:space-between;gap:.6rem}.task{border:2px solid #2c333a}.task.active{border-style:dashed}html{font-size:100%}body{font-family:monospace}a{cursor:pointer}.hidden{display:none}.clickable{cursor:pointer}',"",{version:3,sources:["webpack://./src/styles/base/_layout.scss","webpack://./src/styles/abstracts/_mixins.scss","webpack://./src/styles/abstracts/_colors.scss","webpack://./src/styles/abstracts/_variables.scss","webpack://./src/styles/base/_reset.scss","webpack://./src/styles/components/_footer.scss","webpack://./src/styles/abstracts/_fonts.scss","webpack://./src/styles/components/_navbar.scss","webpack://./src/styles/components/_task.scss","webpack://./src/styles/styles.scss"],names:[],mappings:"AAIA,SCiBE,YAAA,CACA,qBAAA,CACA,6BAAA,CDhBA,aAAA,CACA,wBEFQ,CFKV,WACE,YAAA,CACA,6BAAA,CAEA,aGTgB,CHUhB,WAAA,CACA,SGVkB,CHWlB,aEFa,CETf,2ZAaC,QAAA,CACA,SAAA,CACA,QAAA,CACA,cAAA,CACA,YAAA,CACA,uBAAA,CAGD,8EAEC,aAAA,CAED,KACC,aAAA,CAED,MACC,eAAA,CAED,aACC,WAAA,CAED,oDAEC,UAAA,CACA,YAAA,CAED,MACC,wBAAA,CACA,gBAAA,CAGD,OACG,eAAA,CACA,aAAA,CACA,WAAA,CACA,SAAA,CACA,YAAA,CACA,cAAA,CACA,eAAA,CAGH,MACE,SAAA,CAGF,EACE,SAAA,CC7DF,UJUE,YAAA,CACA,kBAAA,CACA,6BAAA,CITA,aFFgB,CEGhB,cCGsB,CDFtB,aHMa,CKXf,INUE,YAAA,CACA,kBAAA,CACA,6BAAA,CMTA,aJFgB,CIGhB,wBLFa,CKGb,gBDCoB,CAAA,gBALN,CCMd,aLIa,CKDf,MAAA,YAAA,CNCE,kBAAA,CACA,6BAAA,CAAA,SEXgB,CKJlB,MACE,wBAAA,CAGF,aACE,mBAAA,CCEF,KACE,cAAA,CAGF,KACE,qBHZQ,CGeV,EACE,cAAA,CAMF,QACE,YAAA,CAGF,WACE,cAAA",sourcesContent:["@use '../abstracts/variables';\n@use '../abstracts/colors';\n@use '../abstracts/mixins';\n\n.wrapper {\n  @include mixins.flex-vertical;\n\n  height: 100dvh;\n  background-color: colors.$bg-main;\n}\n\n.workspace {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n\n  padding: variables.$padding-primary;\n  flex-grow: 1;\n  gap: variables.$padding-secondary;\n  color: colors.$text-primary;\n}\n","@use '../abstracts/variables';\n\n/* Shapes */\n\n@mixin radius-rounded {\n  border-radius: variables.$radius-primary;\n}\n\n@mixin radius-rounded-skewed {\n  border-radius: variables.$radius-primary 0 variables.$radius-primary 0;\n}\n\n/* Layout */\n\n@mixin flex-horizontal {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n@mixin flex-vertical {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n","/* Primary brand colors (based on pektron colours) */\n$primary: #00F6FF;         // Bright accent (main brand color)\n$primary-light: #66FCFF;   // Lighter hover/active\n$primary-dark: #00C2C9;    // Darker variant for contrast\n\n/* Backgrounds */\n$bg-main: #0D1117;           // Main dark background\n$bg-secondary: #161B22;      // Cards, modals, secondary layers\n$bg-tertiary: #1E242B;       // Slightly lighter background layer\n$bg-quaternary: #27303A;     // Even lighter background for highlights\n\n/* Surface layers */\n$surface: #1F2733;         // Surfaces like toolbars, panels\n$elevation: #2A3442;       // Popovers, dropdowns\n\n/* Text */\n$text-primary: #E6EDF3;    // Main text\n$text-secondary: #9BA7B4;  // Muted text\n$text-on-primary: #000000; // Text on cyan backgrounds\n\n/* Borders and dividers */\n$border: #2C333A;          // Input borders and dividers\n$border-light: #3B424B;    // Subtle lines and outlines\n\n/* State indicators */\n$success: #2EEA7F;         // Success/complete\n$caution: #F4CE42;         // Warning/caution\n$warning: #F45B69;           // Error/danger\n","/* Shaping */\n\n$radius-primary: 20px;\n\n/* Layout */\n\n$padding-primary: 0.6rem;\n$padding-secondary: 0.4rem;\n\n$padding-relative: 0.6em;\n","/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n\n   Some resets have been added by me at the bottom\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\nbutton {\n   background: none;\n   color: inherit;\n   border: none;\n   padding: 0;\n   font: inherit;\n   cursor: pointer;\n   outline: inherit;\n}\n\ninput {\n  all: unset;\n}\n\na {\n  all: unset;\n}\n","@use '../abstracts/variables';\n@use '../abstracts/mixins';\n@use '../abstracts/colors';\n@use '../abstracts/fonts';\n\nfooter > ul {\n  @include mixins.flex-horizontal;\n  \n  padding: variables.$padding-primary;\n  font-size: fonts.$size-header-secondary;\n  color: colors.$text-primary;\n}\n","/* Font styles */\n\n$primary: monospace;\n\n/* Font weights */\n\n$weight-header: bold;\n$weight-body: normal;\n\n/* Font sizes */\n\n$size-header-primary: 1.2rem;\n$size-header-secondary: 1rem;\n","@use '../abstracts/variables';\n@use '../abstracts/mixins';\n@use '../abstracts/colors';\n@use '../abstracts/fonts';\n\nnav {\n  @include mixins.flex-horizontal;\n\n  padding: variables.$padding-primary;\n  background-color: colors.$bg-secondary;\n  font-size: fonts.$size-header-primary;\n  font-weight: fonts.$weight-header;\n  color: colors.$text-primary;\n}\n\n.menu {\n  @include mixins.flex-horizontal;\n  gap: variables.$padding-primary;\n}\n","@use '../abstracts/colors';\n\n.task {\n  border: 2px solid colors.$border;\n}\n\n.task.active {\n  border-style: dashed;\n}\n","@use 'base';\n@use 'components';\n\n@use 'abstracts/fonts';\n\n/* Global settings */\n\n/* Elements */\n\nhtml {\n  font-size: 100%;\n}\n\nbody { \n  font-family: fonts.$primary;\n}\n\na {\n  cursor: pointer;\n}\n\n\n/* Classes */\n\n.hidden {\n  display: none;\n}\n\n.clickable {\n  cursor: pointer;\n}\n"],sourceRoot:""}]);const i=s}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var r=t(72),a=t.n(r),o=t(825),s=t.n(o),i=t(659),c=t.n(i),d=t(56),l=t.n(d),A=t(540),u=t.n(A),p=t(113),b=t.n(p),f=t(911),m={};m.styleTagTransform=b(),m.setAttributes=l(),m.insert=c().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=u(),a()(f.A,m),f.A&&f.A.locals&&f.A.locals;const C=e=>document.querySelector(e),g={navMenu:C("nav .menu"),taskList:C(".tasks .list"),jobsList:C(".jobs .list"),newTask:C(".new-task")},y=(e,n=[],t="",r="",a="text")=>Object.assign(document.createElement("input"),{name:e,classList:n,placeholder:t,value:r,type:a}),h=((e="USER",n="0000",t="",r=new Date(Date.now()),a=new Date(Date.now()))=>({id:crypto.randomUUID(),owner:e,project:n,content:t,dateStart:r,dateEnd:a}))(),v=e=>String(e.getHours()).padStart(2,"0")+":"+String(e.getMinutes()).padStart(2,"0");g.newTask.addEventListener("click",()=>{const e=((e=h)=>{const n=((e="div",n=[],t="")=>Object.assign(document.createElement(e),{classList:n,textContent:t}))("form",["task"]),t=[["project","project",["project"],e.project],["content","content",["content"],e.content],["dateStart","date-start",["date-start"],v(e.dateStart)],["dateEnd","date-end",["date-end","hidden"],v(e.dateEnd)],["submit","end-task",[],"","end task","submit"]],r=Object.fromEntries(t.map(([e,n,t,r,a,o])=>[e,y(n,t,r,a,o)]));return((e,...n)=>{n.forEach(n=>e.appendChild(n))})(n,...Object.values(r)),{form:n,inputs:r}})();g.taskList.appendChild(e.form)})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,